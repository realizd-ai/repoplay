#!/bin/bash

set -ou pipefail

# Uncomment for debugging
#export PS4='+${LINENO}: '
#set -x

print_xmlhelp() {
  cat <<EOF
<operations>
  <!-- Creates a new file -->
  <operation type="create">
    <destinationPath>/absolute-path/ContactForm.tsx</destinationPath>
    <content><![CDATA[import React from 'react';
export default function ContactForm() { return <form>...</form>; }
    ]]></content>
  </operation>

  <!-- Updates/replaces contents of an existing file -->
  <operation type="update">
    <sourcePath>/absolute-path/ContactForm.tsx</sourcePath>
    <content><![CDATA[import React from 'react';
export default function ContactForm() { return <form>...</form>; }
    ]]></content>
  </operation>

  <!-- Deletes an existing file -->
  <operation type="delete">
    <sourcePath>/absolute-path/OldComponent.tsx</sourcePath>
  </operation>

  <!-- Moves or renames a file -->
  <operation type="move">
    <sourcePath>/absolute-path/LegacyButton.tsx</sourcePath>
    <destinationPath>/absolute-path/ui/LegacyButton.tsx</destinationPath>
  </operation>

  <!-- Duplicates an existing file -->
  <operation type="dup">
    <sourcePath>/absolute-path/src/components/Template.tsx</sourcePath>
    <destinationPath>/absolute-path/src/components/TemplateCopy.tsx</destinationPath>
  </operation>
</operations>
EOF
}

print_help() {
  cat <<EOF
Usage: repoplay [OPTION]... XML-PATCH-FILE
Apply repository changes from an XML file.

Options:
  -h, --help       Show this help message and exit
  -x, --xmlhelp    Show the XML format of the patch file
  -v, --verbose    Enable verbose output
  -d, --dry-run    Validate input and show planned actions without modifying files

Example:
  repoplay changes.xml
  repoplay -v -d changes.xml
EOF
}

# Globals
VERBOSE=false
DRY_RUN=false
BACKUPS=()
CREATED_FILES=()

# Log function (only logs if verbose is enabled)
log() {
  if [ "$VERBOSE" = true ]; then
    echo "repoplay: $1"
  fi
}

# Cleanup function (restores backups on error)
cleanup() {
  # First remove any newly created files
  if [ "${#CREATED_FILES[@]:-0}" -gt 0 ]; then
    echo "repoplay: Error occurred. Removing created files..."

    for created in "${CREATED_FILES[@]}"; do
      if [ -f "$created" ]; then
        rm "$created"
        log "Removed created file $created"
      fi
    done
  fi

  # Then restore backups
  if [ "${#BACKUPS[@]:-0}" -gt 0 ]; then
    echo "repoplay: Error occurred. Restoring backups..."

    for backup in "${BACKUPS[@]}"; do
      original="${backup%.tmp}"
      if [ -f "$backup" ]; then
        mv "$backup" "$original"
        log "Restored $original from $backup"
      fi
    done
  fi

  echo "repoplay: no files have been modified"
  exit 1
}

# executes if any command returns a non-zero exit status
unhandled_error() {
    echo "repoplay: An unhandled non-zero exit status has been returned"
    cleanup
}

trap unhandled_error ERR

# Check for xmllint
if ! command -v xmllint >/dev/null 2>&1; then
  echo "repoplay: Error: xmllint is not installed"
  echo "repoplay: Please install it using: 'sudo apt-get install libxml2-utils' or 'brew install libxml2'"
  exit 1
fi

# Parse arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      print_help
      exit 0
      ;;
    -x|--xmlhelp)
      print_xmlhelp
      exit 0
      ;;
    -v|--verbose)
      VERBOSE=true
      shift
      ;;
    -d|--dry-run)
      DRY_RUN=true
      shift
      ;;
    -*) # Detect unknown options
      echo "repoplay: Error: Unknown option '$1'"
      exit 1
      ;;
    *) # Handle positional arguments
      if [[ -z "${INPUT_FILE:-}" ]]; then
        INPUT_FILE="$1"
      else
        echo "repoplay: Error: Unexpected argument '$1'"
        exit 1
      fi
      shift
      ;;
  esac
done

if [[ -z "${INPUT_FILE:-}" ]]; then
  echo "repoplay: Error: Exactly one input file must be specified. Use -h for help"
  exit 1
fi

if [ ! -f "$INPUT_FILE" ]; then
  echo "repoplay: Error: Input file '$INPUT_FILE' does not exist"
  exit 1
fi

log "Reading XML from $INPUT_FILE"

# Validate XML format
if ! xmllint --noout "$INPUT_FILE" 2>/dev/null; then
  echo "repoplay: Error: Invalid XML format in $INPUT_FILE"
  exit 1
fi
log "XML format is valid"

# Parse XML operations
OPERATIONS=$(xmllint --xpath "/operations/operation" "$INPUT_FILE" 2>/dev/null)
if [ -z "$OPERATIONS" ]; then
  echo "repoplay: Error: No operations found in the input file"
  exit 1
fi
log "Parsed operations"

# Pre-check phase
log "Pre-checking all operations"

# Get total number of operations
count=$(xmllint --xpath "count(//operation)" "$INPUT_FILE")

for ((pos=1; pos<=$count; pos++)); do
 type=$(xmllint --xpath "string(//operation[$pos]/@type)" "$INPUT_FILE" 2>/dev/null)

 case "$type" in
   create)
     dst=$(xmllint --xpath "//operation[$pos]/destinationPath/text()" "$INPUT_FILE" 2>/dev/null)
     log "Operation '$type' found at position $pos, destinationPath=$dst"

     if [ -f "$dst" ]; then
       echo "repoplay: Error: Destination file '$dst' already exists for create operation"
       exit 1
     fi
     ;;

   update|delete|move|dup)
     src=$(xmllint --xpath "//operation[$pos]/sourcePath/text()" "$INPUT_FILE" 2>/dev/null)
     log "Operation '$type' found at position $pos, sourcePath=$src"

     if [ ! -f "$src" ]; then
       echo "repoplay: Error: Source file '$src' does not exist for $type operation"
       exit 1
     fi

     if [[ "$type" == "update" || "$type" == "delete" || "$type" == "move" ]]; then
       backup="$src.tmp"
       cp "$src" "$backup"
       BACKUPS+=("$backup")
       log "Backed up $src to $backup"
     fi
     ;;

   *)
     echo "repoplay: Error: Invalid operation '$type' in pre-check phase"
     exit 1
     ;;
 esac
done

# was exit 1 called inside the while loop (pipeline means an exit in the while is in a sub-process)
if [ $? -ne 0 ]; then
  exit 1
fi

# Apply operations
log "Applying operations..."

for ((pos=1; pos<=$count; pos++)); do
  type=$(xmllint --xpath "string(//operation[$pos]/@type)" "$INPUT_FILE" 2>/dev/null)
  log "Operation '$type' found at position $pos"

  case "$type" in
    create)
      dst=$(xmllint --xpath "//operation[$pos]/destinationPath/text()" "$INPUT_FILE" 2>/dev/null)
      content=$(xmllint --xpath "//operation[$pos]/content/text()" "$INPUT_FILE" 2>/dev/null | \
              sed 's/^\s*<!\[CDATA\[//;s/\]\]>\s*$//')

      if [ "$DRY_RUN" = true ]; then
        echo "repoplay: (dry-run) Didn't create file '$dst'"
      else
        mkdir -p "$(dirname "$dst")" && \
        printf "%s" "$content" > "$dst" || \
            { echo "repoplay: Error: Failed to create file '$dst'"; exit 1; }

        CREATED_FILES+=("$dst")  # Track the created file
        log "Created $dst"
      fi
      ;;

    update)
      src=$(xmllint --xpath "//operation[$pos]/sourcePath/text()" "$INPUT_FILE" 2>/dev/null)
      content=$(xmllint --xpath "//operation[$pos]/content/text()" "$INPUT_FILE" 2>/dev/null | \
              sed 's/^\s*<!\[CDATA\[//;s/\]\]>\s*$//')

      if [ "$DRY_RUN" = true ]; then
        echo "repoplay: (dry-run) Didn't update file '$src'"
      else
        printf "%s" "$content" > "$src" || \
          { echo "repoplay: Error: Failed to update file '$src'"; exit 1; }
        log "Updated $src"
      fi
      ;;

    delete)
      src=$(xmllint --xpath "//operation[$pos]/sourcePath/text()" "$INPUT_FILE" 2>/dev/null)

      if [ "$DRY_RUN" = true ]; then
        echo "repoplay: (dry-run) Didn't delete file '$src'"
      else
        rm "$src" || { echo "repoplay: Error: Failed to delete file '$src'"; exit 1; }
        log "Deleted $src"
      fi
      ;;

    move)
      src=$(xmllint --xpath "//operation[$pos]/sourcePath/text()" "$INPUT_FILE" 2>/dev/null)
      dst=$(xmllint --xpath "//operation[$pos]/destinationPath/text()" "$INPUT_FILE" 2>/dev/null)

      if [ "$DRY_RUN" = true ]; then
        echo "repoplay: (dry-run) Would move file '$src' to '$dst'"
      else
        mkdir -p "$(dirname "$dst")" && \
          mv "$src" "$dst" || { echo "repoplay: Error: Failed to move '$src' to '$dst'"; exit 1; }
        log "Moved $src to $dst"
      fi
      ;;

    dup)
      src=$(xmllint --xpath "//operation[$pos]/sourcePath/text()" "$INPUT_FILE" 2>/dev/null)
      dst=$(xmllint --xpath "//operation[$pos]/destinationPath/text()" "$INPUT_FILE" 2>/dev/null)

      if [ "$DRY_RUN" = true ]; then
        echo "repoplay: (dry-run) Didn't copy file '$src' to '$dst'"
      else
        mkdir -p "$(dirname "$dst")" && \
          cp "$src" "$dst" || { echo "repoplay: Error: Failed to duplicate '$src' to '$dst'"; exit 1; }

        CREATED_FILES+=("$dst")  # Track the created file
        log "Duplicated $src to $dst"
      fi
      ;;

    *)
      echo "repoplay: Error: Unknown operation '$type'"
      exit 1
      ;;
  esac
done

# was exit 1 called inside the while loop (pipeline means an exit in the while is in a sub-process)
if [ $? -ne 0 ]; then
  cleanup
  exit 1
fi

# Delete unused backups
if [ "${#BACKUPS[@]:-0}" -gt 0 ]; then
  for backup in "${BACKUPS[@]}"; do
    rm "$backup"
    log "Removed backup $backup"
  done
fi

if [ "$DRY_RUN" = true ]; then
  log "Dry-run completed successfully"
else
  log "All operations completed successfully"
fi

